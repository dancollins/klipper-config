[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

[display]
#	mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2
display_group: _homescreen

[neopixel btt_mini12864]
#  To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 0.5
initial_GREEN: 0.0
initial_BLUE: 0.5
color_order: RGB

# Format the remaining time nicely
[display_template _remaining_time]
text:
  {% set rtime = printer["gcode_macro M73"].r %}
  { "%02d:%02d" % (rtime // 60, rtime % 60) }


# Custom status display
[display_data _homescreen extruder]
position: 0, 0
text: { render("_heater_temperature", param_heater_name="extruder") }

[display_data _homescreen chamber]
position: 0, 10
text:
    ~chamber~
    { " {:>2.0f}".format(printer['temperature_sensor Chamber'].temperature) }
    ~degrees~

[display_data _homescreen heater_bed]
position: 1, 0
text: { render("_heater_temperature", param_heater_name="heater_bed") }

[display_data _homescreen fan]
position: 1, 10
text: { render("_fan_speed") }

[display_data _homescreen print_progress]
position: 2, 0
text: { "{:^10.0%}".format(printer["gcode_macro M73"].p / 100.0) }

[display_data _homescreen progress_bar]
position: 2, 1 # Draw graphical progress bar after text is written
text: { draw_progress_bar(2, 0, 10, printer["gcode_macro M73"].p / 100.0) }

[display_data _homescreen remaining_time]
position: 2, 11
text: { render("_remaining_time") }

[display_data _homescreen print_status]
position: 3, 0
text: { render("_print_status") }

[display_glyph chamber]
data:
  ................
  ................
  .**************.
  .*............*.
  .*............*.
  .*............*.
  .*....*..*....*.
  .*...*..*..*..*.
  .*..*..*..*...*.
  .*....*..*....*.
  .*............*.
  .*............*.
  .*............*.
  .**************.
  ................
  ................

# 
# Menu
#

[menu __main __quick]
type: list
name: Quick

[menu __main __quick __setup]
type: command
name: QSTART
gcode: QSTART

[menu __main __quick __g32]
type: command
name: G32
gcode: G32

[menu __main __quick __heat_chamber]
type: input
enable: True
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 5
gcode: HEAT_CHAMBER BED={menu.input}

[menu __main __quick __case_lights_on]
type: command
name: {"Lights On"}
gcode: CASE_LIGHTS BRIGHTNESS=100

[menu __main __quick __case_lights_off]
type: command
name: {"Lights Off"}
gcode: CASE_LIGHTS BRIGHTNESS=0

[menu __main __quick __nozzle_swap]
type: command
name: {"Move for Swap"}
gcode: G0 X180 Y30 Z100 F5000

[menu __main __quick __pause]
type: command
name: {"Pause"}
gcode: PAUSE

[menu __main __quick __resume]
type: command
name: {"Resume"}
gcode: RESUME

# We'll disable and re-create some of the menus (as I couldn't figure
# out how to remove commands from the menu)
[menu __main __octoprint]
type: disabled

[menu __main __sdcard]
type: disabled

[menu __main __filament]
type: disabled

[menu __main __filament2]
type: list
name: Filament

[menu __main __filament2 __hotend0_target]
type: input
enable: {'extruder' in printer}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 5
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __filament2 __load]
type: command
name: Load Filament
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E50 F960
    G1 E50 F500
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament2 __unload]
type: command
name: Unload Filament
gcode:
    SAVE_GCODE_STATE NAME=__filament__unload
    M83
    G1 E-50 F960
    G1 E-50 F960
    RESTORE_GCODE_STATE NAME=__filament__unload

[menu __main __filament2 __extrude]
type: command
name: Push Filament
gcode:
    SAVE_GCODE_STATE NAME=__filament__push
    M83
    G1 E50 F500
    G1 E50 F500
    RESTORE_GCODE_STATE NAME=__filament__push

[menu __main __filament2 __clean_purge]
type: command
name: Purge Nozzle
gcode:
    CLEAN_NOZZLE PURGE=1

[menu __main __filament2 __clean]
type: command
name: Wipe Nozzle
gcode:
    CLEAN_NOZZLE PURGE=0    
    
