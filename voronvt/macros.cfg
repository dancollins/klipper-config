[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|int %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|int %}
    {% set EXTRUDER_PRE_TEMP = params.EXTRUDER_PRE_TEMP|default(150)|int %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|int %}

    G90
    M107

    SET_LED_EFFECT EFFECT=hotend_temperature REPLACE=1

    SET_LED LED=daylight WHITE=0 SYNC=0 TRANSMIT=1
    SET_LED_EFFECT EFFECT=bed_temperature REPLACE=1

    # Move the toolhead somewhere sensible!
    G28 XY
    SILICONE_PARK

    # Start getting hot, but don't melt any plastic in the hotend
    SET_DISPLAY_TEXT MSG="heating bed"
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_PRE_TEMP}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
    
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP}

    SET_DISPLAY_TEXT MSG="heating extruder"
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_PRE_TEMP}

    # Heat the chamber up
    {% if CHAMBER_TEMP > 0 %}
      CHAMBER_TEMPERATURE_WAIT CHAMBER_TEMP={ CHAMBER_TEMP } TIMEOUT=600
    {% endif %}

    # Calibrate
    SET_DISPLAY_TEXT MSG="calibrating"
    SET_LED LED=daylight WHITE=0.05 SYNC=0 TRANSMIT=1
    G28 Z
    Z_TILT_ADJUST
    G28 Z
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    CARTOGRAPHER_TOUCH FUZZY=10

    # We can't print until the extruder is up to temperature!
    SET_DISPLAY_TEXT MSG="heating extruder"
    SMART_PARK
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}

    # Get ready to go!
    SET_DISPLAY_TEXT MSG="purging"
    SET_LED LED=daylight WHITE=0.15 SYNC=0 TRANSMIT=1
    LINE_PURGE

    SET_LED_EFFECT EFFECT=toolhead_idle REPLACE=1
    STOP_LED_EFFECTS LEDS=neopixel:case_lights

    SET_DISPLAY_TEXT

    G92 E0
    G90

[gcode_macro END_PRINT]
gcode:
    M400

    # Retract and whip off the tail
    G92 E0
    G1 E-5.0 F3600
    G91
    G0 Y10 Z4 F6000

    SILICONE_PARK

    TURN_OFF_HEATERS

    SET_LED LED=daylight WHITE=0.05 SYNC=0 TRANSMIT=1

    SET_DISPLAY_TEXT

[gcode_macro SILICONE_PARK]
gcode:
    # We'll get in position next to the brush
    G90
    G0 X148 Y300 F12000

    # Wipe across the brush slowly and onto the parking pad
    G0 X59 F2000

[gcode_macro QUICK_START]
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}
    {% set BED_TEMP = params.BED_TEMP|default(110)|int %}

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}

    SET_DISPLAY_TEXT MSG="homing"
    G28
    Z_TILT_ADJUST
    G28 Z

    # Park right in the middle
    G0 X148 Y140 Z20 F12000

    SET_DISPLAY_TEXT

[gcode_macro MOVE_TO_BELT_TUNE]
gcode:
    G90
    G28
    # Center X, Y set so there's 150 mm between idler and XY pulleys
    # ... which is what the Voron instructions want!
    G0 X148 Y105 Z20 F12000

[gcode_macro CHAMBER_TEMPERATURE_WAIT]
description: Waits for the specified chamber temperature, but gives up if we run out of time.
gcode:
  {% set chamber_target = params.CHAMBER_TEMP | default(50.0) | float %}
  {% set timeout = params.TIMEOUT | default (600.0) | float %}
  {% set check_interval = params.CHECK_INTERVAL | default(30.0) | float %}
  {% set bed_target = printer["heater_bed"].target %}

  {% set n_loops = (timeout / check_interval) | round(method="ceil") | int %}

  {% if bed_target <= chamber_target %}
    { action_respond_info("The chamber will not reach the specified target, as the bed wont be hot enough!") }
  {% elif printer["temperature_sensor Chamber"].temperature < chamber_target}
    _WAIT_BED

    { action_respond_info("Waiting for up to {} seconds for the chamber to reach {} °C...".format(
        (timeout | round(method="ceil") | int),
        (chamber_target | round(method="ceil") | int)
      )) }

    {% for i in range (n_loops) %}
      _WAIT_CHAMBER CHAMBER_TEMP={ chamber_target } DELAY={ check_interval }
    {% endfor %}

    _CHECK_CHAMBER CHAMBER_TEMP={ chamber_target }
  {% endif %}


[gcode_macro _WAIT_BED]
gcode:
  {% set bed_target = printer["heater_bed"].target %}
  { action_respond_info("Waiting for the bed to reach {} °C".format(
      (bed_target | round(method="ceil") | int)
    )) }

  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={ bed_target }

[gcode_macro _WAIT_CHAMBER]
gcode:
  {% set chamber_target = params.CHAMBER_TEMP | float %}
  {% set delay = params.DELAY | float %}
  {% set delay_ms = (delay * 1000.0) | round(method="ceil") | int %}

  {% if printer["temperature_sensor Chamber"].temperature < chamber_target %}
    { action_respond_info("Waiting another {} seconds...".format(delay)) }
    G4 P{ delay_ms }
  {% endif %}

[gcode_macro _CHECK_CHAMBER]
gcode:
  {% set chamber_target = params.CHAMBER_TEMP | float %}

  {% if printer["temperature_sensor Chamber"].temperature < chamber_target %}
    { action_respond_info("Chamber has not reached the target!".format(delay)) }
  {% else %}
    { action_respond_info("Chamber has reached the target!".format(delay)) }
  {% endif %}

# Set progress
[gcode_macro M73]
rename_existing: M73.1
variable_p: 0
variable_r: 0
gcode:
    {% if params.P is defined %}
        SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={params.P}
        M73.1 P{params.P} R{r}
    {% endif %}
    {% if params.R is defined %}
        SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={params.R}
        M73.1 P{p} R{params.R}
    {% endif %}

# Pause
[gcode_macro M600]
gcode:
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : True ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 1800     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: "SILICONE_PARK"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

