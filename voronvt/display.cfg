[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

[display]
#  mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2
# Custom homescreen
display_group: _homescreen

[neopixel btt_mini12864]
#  To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 0.1
initial_GREEN: 0.5
initial_BLUE: 0.0
color_order: RGB

#  Set RGB values on boot up for each Neopixel. 
#  Index 3 = display, Index 1 and 2 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
       SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=3 TRANSMIT=0
       SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
       SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2


#
# Homescreen
#
[display_data _homescreen extruder]
position: 0, 0
text: { render("_heater_temperature", param_heater_name="extruder") }

[display_glyph chamber]
data:
  ................
  ................
  .**************.
  .*............*.
  .*............*.
  .*............*.
  .*....*..*....*.
  .*...*..*..*..*.
  .*..*..*..*...*.
  .*....*..*....*.
  .*............*.
  .*............*.
  .*............*.
  .**************.
  ................
  ................

[display_data _homescreen chamber]
position: 0, 10
text:
    ~chamber~
    { " {:>2.0f}".format(printer['temperature_sensor Chamber'].temperature) }
    ~degrees~

[display_data _homescreen heater_bed]
position: 1, 0
text: { render("_heater_temperature", param_heater_name="heater_bed") }

[display_data _homescreen fan]
position: 1, 10
text: { render("_fan_speed") }

[display_data _homescreen print_progress]
position: 2, 0
text: { "{:^10.0%}".format(printer["gcode_macro M73"].p / 100.0) }

[display_data _homescreen progress_bar]
position: 2, 1 # Draw graphical progress bar after text is written
text: { draw_progress_bar(2, 0, 10, printer["gcode_macro M73"].p / 100.0) }

[display_template _remaining_time]
text:
  {% set rtime = printer["gcode_macro M73"].r %}
  { "%02d:%02d" % (rtime // 60, rtime % 60) }

[display_data _homescreen remaining_time]
position: 2, 11
text: { render("_remaining_time") }

[display_data _homescreen print_status]
position: 3, 0
text: { render("_print_status") }
